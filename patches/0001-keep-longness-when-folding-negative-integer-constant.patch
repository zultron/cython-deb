From a89bf8567d2c54f38a5a3f4f8b8f9208db936d64 Mon Sep 17 00:00:00 2001
From: Stefan Behnel <stefan_ml@behnel.de>
Date: Tue, 27 Nov 2012 07:37:32 +0100
Subject: [PATCH 1/6] keep longness when folding negative integer constants

--HG--
extra : transplant_source : %CC%EC%23%19%11%1A%22%FB%5C-%18%AD%0D%FC%24L%BD%81%91%FF
---
 Cython/Compiler/ExprNodes.py |  3 ++-
 tests/run/int_literals.pyx   | 18 +++++++++++++++++-
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/Cython/Compiler/ExprNodes.py b/Cython/Compiler/ExprNodes.py
index 13fc0ef..06fc30d 100755
--- a/Cython/Compiler/ExprNodes.py
+++ b/Cython/Compiler/ExprNodes.py
@@ -7290,7 +7290,8 @@ def unop_node(pos, operator, operand):
     # Construct unnop node of appropriate class for
     # given operator.
     if isinstance(operand, IntNode) and operator == '-':
-        return IntNode(pos = operand.pos, value = str(-Utils.str_to_number(operand.value)))
+        return IntNode(pos = operand.pos, value = str(-Utils.str_to_number(operand.value)),
+                       longness=operand.longness, unsigned=operand.unsigned)
     elif isinstance(operand, UnopNode) and operand.operator == operator in '+-':
         warning(pos, "Python has no increment/decrement operator: %s%sx == %s(%sx) == x" % ((operator,)*4), 5)
     return unop_node_classes[operator](pos,
diff --git a/tests/run/int_literals.pyx b/tests/run/int_literals.pyx
index edc14af..770b60a 100644
--- a/tests/run/int_literals.pyx
+++ b/tests/run/int_literals.pyx
@@ -1,6 +1,8 @@
 __doc__ = u"""
 >>> c_longs()
 (1, 1L, -1L, 18446744073709551615L)
+>>> negative_c_longs()
+(-1, -9223285636854775809L)
 >>> py_longs()
 (1, 1L, 100000000000000000000000000000000L, -100000000000000000000000000000000L)
 
@@ -18,14 +20,28 @@ import sys
 if sys.version_info[0] >= 3:
     __doc__ = __doc__.replace(u'L', u'')
 
+@cython.test_assert_path_exists(
+    '//IntNode[@longness = "LL"]',
+    '//IntNode[@longness = "L"]',
+    )
+@cython.test_fail_if_path_exists('//IntNode[@longness = ""]')
 def c_longs():
     cdef long a = 1L
     cdef unsigned long ua = 1UL
     cdef long long aa = 0xFFFFFFFFFFFFFFFFLL
     cdef unsigned long long uaa = 0xFFFFFFFFFFFFFFFFULL
-
     return a, ua, aa, uaa
 
+@cython.test_assert_path_exists(
+    '//IntNode[@longness = "LL"]',
+    '//IntNode[@longness = "L"]',
+    )
+@cython.test_fail_if_path_exists('//IntNode[@longness = ""]')
+def negative_c_longs():
+    cdef long a = -1L
+    cdef long long aa = -9223285636854775809LL
+    return a, aa
+
 def py_longs():
     return 1, 1L, 100000000000000000000000000000000, -100000000000000000000000000000000
 
-- 
1.8.0

